#! /usr/bin/env bash

set -e

outDir=$1
modulePath=$2

buildDir=$(mktemp -d)
cd buildDir

function processModule() {
  mkdir -p $(dirname $outFileName)
  touch $outFileName

  while read line; do
    case $line in
      "---")
        break
        ;;
      ">>>")
        # Extra padding
        echo >> $outFileName
        echo >> $outFileName

        processModels
        ;;
      *)
        set -f
        set -- $line
        local importedModuleName=${1//\./::}
        shift

        echo "use $modulePath::$importedModuleName;" >> $outFileName

        # For instance, if you wanted to specify imported symbols
        # for importedModel; do
        #   echo -n "$importedModel," >> $outFileName
        # done
        set +f
        ;;
    esac
  done
}

function processModels() {
  while read modelName; do
    case $modelName in
      "---")
        break
        ;;
      ">>>")
        processModel
        ;;
      *)
        # line is a tag assigned to this model.
        ;;
    esac
  done
}

function processModel() {
  validateImplFile=$(mktemp)
  expandImplFile=$(mktemp)

  read kind
  processTypeNode

  local isStruct=0

  case $kind in
    Reference)
      echo -n "pub type $modelName = " >> $outFileName
      writeReferencedSymbol
      echo ";" >> $outFileName
      ;;
    Field)
      isStruct=1
      echo "pub struct $modelName {" >> $outFileName
      writeField
      ;;
    *)
      ;;
  esac


  while read kind; do
    case $kind in
      "---")
        break
        ;;
      ">>>")
        echo "schema format is corrupted, cannot interpret." 1>&2
        ;;
      *)
        processTypeNode
        # tag for this field.
        ;;
    esac
  done

  echo "}" >> $outFileName
}

function writeReferencedSymbol() {
  echo -n ${referenceModule//\./::}::$referenceModel >> $outFileName
}

function processTypeNode() {
  case $kind in
    Reference)
      read referenceSymbol

      set -f
      set -- $referenceSymbol
      set +f

      referenceModule=$1
      referenceModel=$1
      ;;
    Field)
      read fieldName
      ;;
    Primitive)
      read primitiveKind
      ;;
    *)
      ;;
  esac

  while read line; do
    case $1 in
      "---")
        break
        ;;
      ">>>")
        echo "schema format is corrupted, cannot interpret." 1>&2
        exit 1
        ;;
      *)
        # process any extra tags here!
        ;;
    esac
  done
}


while read moduleName
do
  outFileName=${1//\./\/}.rs
  processModule
done

echo $buildDir
