from idol.__idol__ import Struct as _Struct, List as _List, Map as _Map, Optional as _Optional, Enum as _Enum, Any as _Any, Literal as _Literal
import json
import idol.declarations
# DO NOT EDIT THIS FILE
# This file is generated via idol_py.py.  You can either subclass these types
# in your own module file or update the relevant model.toml file and regenerate.

__all__ = [
    "FieldDec",
    "TypeDec",
    "ModuleDec",
]


FieldDec = _List[str]


class TypeDec(_Struct):
    enum: _List[str]
    fields: _Map[FieldDec]
    is_a: str
    tags: _List[str]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"enum": {"field_name": "enum", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}, "fields": {"field_name": "fields", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "declarations", "qualified_name": "declarations.FieldDec", "type_name": "FieldDec"}, "struct_kind": "Map"}}, "is_a": {"field_name": "is_a", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "tags": {"field_name": "tags", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TypeDec"}')


ModuleDec = _Map[TypeDec]
