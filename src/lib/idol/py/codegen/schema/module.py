[['class SchemaModule(Struct_):', [['@property', 'def abstract_types_by_name(self) -> Map_[SchemaType]:', ["return Map_[SchemaType].wrap(self._orig.get('abstract_types_by_name'))"]], ['@abstract_types_by_name.setter', 'def abstract_types_by_name(self, v) -> Map_[SchemaType]:', ["self._orig['abstract_types_by_name'] = Map_[SchemaType].unwrap(v)"]], ['@property', 'def dependencies(self) -> List_[SchemaDependency]:', ["return List_[SchemaDependency].wrap(self._orig.get('dependencies'))"]], ['@dependencies.setter', 'def dependencies(self, v) -> List_[SchemaDependency]:', ["self._orig['dependencies'] = List_[SchemaDependency].unwrap(v)"]], ['@property', 'def module_name(self) -> str:', ["return str.wrap(self._orig.get('module_name'))"]], ['@module_name.setter', 'def module_name(self, v) -> str:', ["self._orig['module_name'] = str.unwrap(v)"]], ['@property', 'def types_by_name(self) -> Map_[SchemaType]:', ["return Map_[SchemaType].wrap(self._orig.get('types_by_name'))"]], ['@types_by_name.setter', 'def types_by_name(self, v) -> Map_[SchemaType]:', ["self._orig['types_by_name'] = Map_[SchemaType].unwrap(v)"]], ['@property', 'def types_dependency_ordering(self) -> List_[str]:', ["return List_[str].wrap(self._orig.get('types_dependency_ordering'))"]], ['@types_dependency_ordering.setter', 'def types_dependency_ordering(self, v) -> List_[str]:', ["self._orig['types_dependency_ordering'] = List_[str].unwrap(v)"]], "fields = [['abstract_types_by_name', 'abstract_types_by_name', Map_[SchemaType], {'optional': False}], ['dependencies', 'dependencies', List_[SchemaDependency], {'optional': False}], ['module_name', 'module_name', str, {'optional': False}], ['types_by_name', 'types_by_name', Map_[SchemaType], {'optional': False}], ['types_dependency_ordering', 'types_dependency_ordering', List_[str], {'optional': False}]]"]]]