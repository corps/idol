from idol.__idol__ import Struct as _Struct, List as _List, Map as _Map, Optional as _Optional, Enum as _Enum, Any as _Any, Literal as _Literal, expand_primitive as _expand_primitive, validate_primitive as _validate_primitive
import json
import types

import idol.schema
# DO NOT EDIT THIS FILE
# This file is generated via idol_py.py.  You can either subclass these types
# in your own module file or update the relevant model.toml file and regenerate.

__all__ = [
    "StructKind",
    "PrimitiveType",
    "Literal",
    "Reference",
    "TypeStruct",
    "Field",
    "Dependency",
    "Type",
    "Module",
]


class StructKind(_Enum):
    MAP = 'Map'
    REPEATED = 'Repeated'
    SCALAR = 'Scalar'
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [], "fields": {}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.StructKind", "type_name": "StructKind"}, "options": ["Scalar", "Repeated", "Map"], "tags": [], "type_vars": []}')


class PrimitiveType(_Enum):
    ANY = 'any'
    BOOL = 'bool'
    DOUBLE = 'double'
    INT = 'int'
    STRING = 'string'
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [], "fields": {}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.PrimitiveType", "type_name": "PrimitiveType"}, "options": ["int", "double", "string", "bool", "any"], "tags": [], "type_vars": []}')


class Literal(_Struct):
    bool: bool
    double: float
    int: int
    string: str
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [], "fields": {"bool": {"field_name": "bool", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "double": {"field_name": "double", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "double", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "int": {"field_name": "int", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "string": {"field_name": "string", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.Literal", "type_name": "Literal"}, "options": [], "tags": [], "type_vars": []}')


class Reference(_Struct):
    module_name: str
    qualified_name: str
    type_name: str
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [], "fields": {"module_name": {"field_name": "module_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "qualified_name": {"field_name": "qualified_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "type_name": {"field_name": "type_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}, "options": [], "tags": [], "type_vars": []}')


class TypeStruct(_Struct):
    literal: _Optional[Literal]
    parameters: _List[Reference]
    primitive_type: PrimitiveType
    reference: Reference
    struct_kind: StructKind
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Literal", "type_name": "Literal"}}, {"from": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}}, {"from": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.PrimitiveType", "type_name": "PrimitiveType"}}, {"from": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}}, {"from": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.StructKind", "type_name": "StructKind"}}], "fields": {"literal": {"field_name": "literal", "tags": ["optional"], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Literal", "type_name": "Literal"}, "struct_kind": "Scalar"}}, "parameters": {"field_name": "parameters", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}, "struct_kind": "Repeated"}}, "primitive_type": {"field_name": "primitive_type", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.PrimitiveType", "type_name": "PrimitiveType"}, "struct_kind": "Scalar"}}, "reference": {"field_name": "reference", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}, "struct_kind": "Scalar"}}, "struct_kind": {"field_name": "struct_kind", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.StructKind", "type_name": "StructKind"}, "struct_kind": "Scalar"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "options": [], "tags": [], "type_vars": []}')


class Field(_Struct):
    field_name: str
    tags: _List[str]
    type_struct: TypeStruct
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "schema", "qualified_name": "schema.Field", "type_name": "Field"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}}], "fields": {"field_name": {"field_name": "field_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "tags": {"field_name": "tags", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}, "type_struct": {"field_name": "type_struct", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "struct_kind": "Scalar"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.Field", "type_name": "Field"}, "options": [], "tags": [], "type_vars": []}')


class Dependency(_Struct):
    from_: Reference
    is_abstraction: bool
    is_local: bool
    to: Reference
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}}, {"from": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}}], "fields": {"from": {"field_name": "from", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}, "struct_kind": "Scalar"}}, "is_abstraction": {"field_name": "is_abstraction", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "is_local": {"field_name": "is_local", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "to": {"field_name": "to", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}, "struct_kind": "Scalar"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}, "options": [], "tags": [], "type_vars": []}')


class Type(_Struct):
    dependencies: _List[Dependency]
    fields: _Map[Field]
    is_a: _Optional[TypeStruct]
    named: Reference
    options: _List[str]
    tags: _List[str]
    type_vars: _List[str]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}}, {"from": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Field", "type_name": "Field"}}, {"from": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}}, {"from": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}}], "fields": {"dependencies": {"field_name": "dependencies", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}, "struct_kind": "Repeated"}}, "fields": {"field_name": "fields", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Field", "type_name": "Field"}, "struct_kind": "Map"}}, "is_a": {"field_name": "is_a", "tags": ["optional"], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.TypeStruct", "type_name": "TypeStruct"}, "struct_kind": "Scalar"}}, "named": {"field_name": "named", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Reference", "type_name": "Reference"}, "struct_kind": "Scalar"}}, "options": {"field_name": "options", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}, "tags": {"field_name": "tags", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}, "type_vars": {"field_name": "type_vars", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "options": [], "tags": [], "type_vars": []}')


class Module(_Struct):
    abstract_types_by_name: _Map[Type]
    dependencies: _List[Dependency]
    module_name: str
    types_by_name: _Map[Type]
    types_dependency_ordering: _List[str]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "schema", "qualified_name": "schema.Module", "type_name": "Module"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}}, {"from": {"module_name": "schema", "qualified_name": "schema.Module", "type_name": "Module"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}}, {"from": {"module_name": "schema", "qualified_name": "schema.Module", "type_name": "Module"}, "is_abstraction": false, "is_local": true, "to": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}}], "fields": {"abstract_types_by_name": {"field_name": "abstract_types_by_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "struct_kind": "Map"}}, "dependencies": {"field_name": "dependencies", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Dependency", "type_name": "Dependency"}, "struct_kind": "Repeated"}}, "module_name": {"field_name": "module_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "types_by_name": {"field_name": "types_by_name", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "schema", "qualified_name": "schema.Type", "type_name": "Type"}, "struct_kind": "Map"}}, "types_dependency_ordering": {"field_name": "types_dependency_ordering", "tags": [], "type_struct": {"literal": null, "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Repeated"}}}, "is_a": null, "named": {"module_name": "schema", "qualified_name": "schema.Module", "type_name": "Module"}, "options": [], "tags": [], "type_vars": []}')
