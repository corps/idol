/*
DO NOT EDIT
This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
*/
import { Literal as ScaffoldLiteral } from "../../schema/Literal";
import { List, Struct } from "../__idol__";
import { Reference as ScaffoldReference } from "../../schema/Reference";
import { PrimitiveType as ScaffoldPrimitiveType } from "../../schema/PrimitiveType";
import { StructKind as ScaffoldStructKind } from "../../schema/StructKind";

export class SchemaTypeStruct {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }
  get literal() {
    return ScaffoldLiteral.wrap(this._original["literal"]);
  }
  set literal(val) {
    this._original["literal"] = ScaffoldLiteral.unwrap(val);
  }
  get parameters() {
    return List.of(ScaffoldReference, { atleastOne: false }).wrap(
      this._original["parameters"]
    );
  }
  set parameters(val) {
    this._original["parameters"] = List.of(ScaffoldReference, {
      atleastOne: false
    }).unwrap(val);
  }
  get primitive_type() {
    return ScaffoldPrimitiveType.wrap(this._original["primitive_type"]);
  }
  set primitive_type(val) {
    this._original["primitive_type"] = ScaffoldPrimitiveType.unwrap(val);
  }
  get primitiveType() {
    return this.primitive_type;
  }
  set primitiveType(val) {
    this.primitive_type = val;
  }
  get reference() {
    return ScaffoldReference.wrap(this._original["reference"]);
  }
  set reference(val) {
    this._original["reference"] = ScaffoldReference.unwrap(val);
  }
  get struct_kind() {
    return ScaffoldStructKind.wrap(this._original["struct_kind"]);
  }
  set struct_kind(val) {
    this._original["struct_kind"] = ScaffoldStructKind.unwrap(val);
  }
  get structKind() {
    return this.struct_kind;
  }
  set structKind(val) {
    this.struct_kind = val;
  }
}

Struct(SchemaTypeStruct, [
  { fieldName: "literal", type: ScaffoldLiteral, optional: true },
  {
    fieldName: "parameters",
    type: List.of(ScaffoldReference, { atleastOne: false }),
    optional: false
  },
  { fieldName: "primitive_type", type: ScaffoldPrimitiveType, optional: false },
  { fieldName: "reference", type: ScaffoldReference, optional: false },
  { fieldName: "struct_kind", type: ScaffoldStructKind, optional: false }
]);
