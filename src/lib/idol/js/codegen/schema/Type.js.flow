/*
DO NOT EDIT
This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
*/
import { List, Map, Primitive, Struct } from "../__idol__";
import { Dependency as ScaffoldDependency } from "../../schema/Dependency";
import { Field as ScaffoldField } from "../../schema/Field";
import { TypeStruct as ScaffoldTypeStruct } from "../../schema/TypeStruct";
import { Reference as ScaffoldReference } from "../../schema/Reference";

export class SchemaType {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }
  get dependencies() {
    return List.of(ScaffoldDependency, { atleastOne: false }).wrap(
      this._original["dependencies"]
    );
  }
  set dependencies(val) {
    this._original["dependencies"] = List.of(ScaffoldDependency, {
      atleastOne: false
    }).unwrap(val);
  }
  get fields() {
    return Map.of(ScaffoldField, {}).wrap(this._original["fields"]);
  }
  set fields(val) {
    this._original["fields"] = Map.of(ScaffoldField, {}).unwrap(val);
  }
  get is_a() {
    return ScaffoldTypeStruct.wrap(this._original["is_a"]);
  }
  set is_a(val) {
    this._original["is_a"] = ScaffoldTypeStruct.unwrap(val);
  }
  get isA() {
    return this.is_a;
  }
  set isA(val) {
    this.is_a = val;
  }
  get named() {
    return ScaffoldReference.wrap(this._original["named"]);
  }
  set named(val) {
    this._original["named"] = ScaffoldReference.unwrap(val);
  }
  get options() {
    return List.of(Primitive.of("string"), { atleastOne: false }).wrap(
      this._original["options"]
    );
  }
  set options(val) {
    this._original["options"] = List.of(Primitive.of("string"), {
      atleastOne: false
    }).unwrap(val);
  }
  get tags() {
    return List.of(Primitive.of("string"), { atleastOne: false }).wrap(
      this._original["tags"]
    );
  }
  set tags(val) {
    this._original["tags"] = List.of(Primitive.of("string"), {
      atleastOne: false
    }).unwrap(val);
  }
  get type_vars() {
    return List.of(Primitive.of("string"), { atleastOne: false }).wrap(
      this._original["type_vars"]
    );
  }
  set type_vars(val) {
    this._original["type_vars"] = List.of(Primitive.of("string"), {
      atleastOne: false
    }).unwrap(val);
  }
  get typeVars() {
    return this.type_vars;
  }
  set typeVars(val) {
    this.type_vars = val;
  }
}

Struct(SchemaType, [
  {
    fieldName: "dependencies",
    type: List.of(ScaffoldDependency, { atleastOne: false }),
    optional: false
  },
  { fieldName: "fields", type: Map.of(ScaffoldField, {}), optional: false },
  { fieldName: "is_a", type: ScaffoldTypeStruct, optional: true },
  { fieldName: "named", type: ScaffoldReference, optional: false },
  {
    fieldName: "options",
    type: List.of(Primitive.of("string"), { atleastOne: false }),
    optional: false
  },
  {
    fieldName: "tags",
    type: List.of(Primitive.of("string"), { atleastOne: false }),
    optional: false
  },
  {
    fieldName: "type_vars",
    type: List.of(Primitive.of("string"), { atleastOne: false }),
    optional: false
  }
]);
