/*
DO NOT EDIT
This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
*/
import { Reference as ScaffoldReference } from "../../schema/Reference";
import { Primitive, Struct } from "../__idol__";

export class SchemaDependency {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }
  get from() {
    return ScaffoldReference.wrap(this._original["from"]);
  }
  set from(val) {
    this._original["from"] = ScaffoldReference.unwrap(val);
  }
  get is_abstraction() {
    return Primitive.of("bool").wrap(this._original["is_abstraction"]);
  }
  set is_abstraction(val) {
    this._original["is_abstraction"] = Primitive.of("bool").unwrap(val);
  }
  get isAbstraction() {
    return this.is_abstraction;
  }
  set isAbstraction(val) {
    this.is_abstraction = val;
  }
  get is_local() {
    return Primitive.of("bool").wrap(this._original["is_local"]);
  }
  set is_local(val) {
    this._original["is_local"] = Primitive.of("bool").unwrap(val);
  }
  get isLocal() {
    return this.is_local;
  }
  set isLocal(val) {
    this.is_local = val;
  }
  get to() {
    return ScaffoldReference.wrap(this._original["to"]);
  }
  set to(val) {
    this._original["to"] = ScaffoldReference.unwrap(val);
  }
}

Struct(SchemaDependency, [
  { fieldName: "from", type: ScaffoldReference, optional: false },
  { fieldName: "is_abstraction", type: Primitive.of("bool"), optional: false },
  { fieldName: "is_local", type: Primitive.of("bool"), optional: false },
  { fieldName: "to", type: ScaffoldReference, optional: false }
]);
