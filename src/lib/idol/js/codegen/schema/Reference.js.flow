/*
DO NOT EDIT
This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
*/
import { Primitive, Struct } from "../__idol__";

// A reference describes the location of a type in the module system.;
export class SchemaReference {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }
  // Just the module name
  get module_name() {
    return Primitive.of("string").wrap(this._original["module_name"]);
  }
  set module_name(val) {
    this._original["module_name"] = Primitive.of("string").unwrap(val);
  }
  get moduleName() {
    return this.module_name;
  }
  set moduleName(val) {
    this.module_name = val;
  }
  // The module_name.type_name string
  get qualified_name() {
    return Primitive.of("string").wrap(this._original["qualified_name"]);
  }
  set qualified_name(val) {
    this._original["qualified_name"] = Primitive.of("string").unwrap(val);
  }
  get qualifiedName() {
    return this.qualified_name;
  }
  set qualifiedName(val) {
    this.qualified_name = val;
  }
  // Just the type name
  get type_name() {
    return Primitive.of("string").wrap(this._original["type_name"]);
  }
  set type_name(val) {
    this._original["type_name"] = Primitive.of("string").unwrap(val);
  }
  get typeName() {
    return this.type_name;
  }
  set typeName(val) {
    this.type_name = val;
  }
}

Struct(SchemaReference, [
  { fieldName: "module_name", type: Primitive.of("string"), optional: false },
  {
    fieldName: "qualified_name",
    type: Primitive.of("string"),
    optional: false
  },
  { fieldName: "type_name", type: Primitive.of("string"), optional: false }
]);
