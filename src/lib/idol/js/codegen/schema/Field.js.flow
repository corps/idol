/*
DO NOT EDIT
This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
*/
import { Primitive, List, Struct } from "../__idol__";
import { TypeStruct as ScaffoldTypeStruct } from "../../schema/TypeStruct";

export class SchemaField {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }

  get field_name() {
    return Primitive.of("string").wrap(this._original["field_name"]);
  }
  set field_name(val) {
    this._original["field_name"] = Primitive.of("string").unwrap(val);
  }
  get fieldName() {
    return this.field_name;
  }
  set fieldName(val) {
    this.field_name = val;
  }

  get tags() {
    return List.of(Primitive.of("string"), { atleastOne: false }).wrap(
      this._original["tags"]
    );
  }
  set tags(val) {
    this._original["tags"] = List.of(Primitive.of("string"), {
      atleastOne: false
    }).unwrap(val);
  }

  get type_struct() {
    return ScaffoldTypeStruct.wrap(this._original["type_struct"]);
  }
  set type_struct(val) {
    this._original["type_struct"] = ScaffoldTypeStruct.unwrap(val);
  }
  get typeStruct() {
    return this.type_struct;
  }
  set typeStruct(val) {
    this.type_struct = val;
  }
}

Struct(SchemaField, [
  { fieldName: "field_name", type: Primitive.of("string"), optional: false },
  {
    fieldName: "tags",
    type: List.of(Primitive.of("string"), { atleastOne: false }),
    optional: false
  },
  { fieldName: "type_struct", type: ScaffoldTypeStruct, optional: false }
]);
