# Scalars are non contained values
# Repeated are homogenous lists.  They can be upgraded or downgraded to and from Scalars.
#   A repeated is indicated in a TypeDec by ending with '[]'
# Maps are homogenous 'dictionaries', whose key is always a string, mapping to js objects.
#   A map is indicated in a TypeDec by ending with '{}'
[StructKind]
enum = ["Scalar", "Repeated", "Map"]

[PrimitiveType]
enum = ["int", "double", "string", "bool", "any"]

# A reference describes the location of a type in the module system.
[Reference.fields]
# The module_name.type_name string
qualified_name = "string"
# Just the type name
type_name = "string"
# Just the module name
module_name = "string"

# A wrapper type containing fields that can describe a Type, as well as its tag metadata.
[Type.fields]
# Set when this is type is an alias or simply an type expression (such as a generic).
# Exclusive with having values for options or fields.
is_a = ["TypeStruct", "optional"]
# When this type is a struct, each of its fields and the type of that field is included
# Exclusive with is_a and options
fields = "Field{}"
# When this type is an enum includes the string values for each enum entry.  Note that each
# target language may have different rules for the enum constant names, but these entries are
# canonical resident values.
# Exclusive with is_a and fields.
options = "string[]"
# General metadata given to a type.  Currently, atleast_one for Repeated types is supported.
# Custom codegen can use these tags to implement semantic types on top of simple logic types.
# In general, however, tags are considred optional and should not be required to
# deserialize / serializeconsume correct logical values.
tags = "string[]"
# The name and module information of this type's definition.
named = "Reference"


# Metadata contained about a module.
[Module.fields]
module_name = "string"
types_by_name = "Type{}"
types_dependency_ordering = "string[]"

[TypeStruct.fields]
struct_kind = "StructKind"
reference = "Reference"
primitive_type = "PrimitiveType"
literal = ["Literal", "optional"]

[Literal.fields]
int = "int"
double = "double"
string = "string"
bool = "bool"

[Field.fields]
field_name = "string"
tags = "string[]"
type_struct = "TypeStruct"