from idol.__idol__ import Struct as _Struct, List as _List, Map as _Map, Optional as _Optional, Enum as _Enum, Any as _Any, Literal as _Literal, expand_primitive as _expand_primitive, validate_primitive as _validate_primitive
import json
import types

import idol.tests.basic
# DO NOT EDIT THIS FILE
# This file is generated via idol_py.py.  You can either subclass these types
# in your own module file or update the relevant model.toml file and regenerate.

__all__ = [
    "TestEnum",
    "TestLiteralTop",
    "TestOptionalField",
    "TestTagsStruct",
    "TestStructInner",
    "TestStruct",
    "TestKind",
    "TestAtleastOne",
    "TestMap",
    "LiteralHello",
    "LiteralThreeO",
    "Literal1",
    "LiteralTrue",
    "LiteralFive",
    "TestLiteralStruct",
    "TestListOfListStruct",
]


class TestEnum(_Enum):
    A = 'a'
    B = 'b'
    C = 'c'
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": null, "options": ["a", "b", "c"], "tags": [], "type_name": "TestEnum", "type_vars": []}')


class TestLiteralTop(_Literal[str]):
    literal: str = 'mooo'
    
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "mooo", "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "TestLiteralTop", "type_vars": []}')


class TestOptionalField(_Struct):
    optional: _Optional[str]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"optional": {"field_name": "optional", "tags": ["optional"], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestOptionalField", "type_vars": []}')


class TestTagsStruct(_Struct):
    a: int
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"a": {"field_name": "a", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": ["tag-a", "tag-b"], "type_name": "TestTagsStruct", "type_vars": []}')


class TestStructInner(_Struct):
    d: bool
    e: float
    f: int
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"d": {"field_name": "d", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "e": {"field_name": "e", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "double", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "f": {"field_name": "f", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int64", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestStructInner", "type_vars": []}')


class TestStruct(_Struct):
    a: str
    b: int
    c: TestStructInner
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"a": {"field_name": "a", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "b": {"field_name": "b", "tags": ["tag"], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "c": {"field_name": "c", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestStructInner", "type_name": "TestStructInner"}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestStruct", "type_vars": []}')


TestKind = str
locals()["TestKind"] = types.new_class("TestKind", (locals()["TestKind"],))
TestKind.__metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "TestKind", "type_vars": []}')
TestKind.expand = classmethod(_expand_primitive)
TestKind.validate = classmethod(_validate_primitive)


TestAtleastOne = _List[TestKind]
locals()["TestAtleastOne"] = types.new_class("TestAtleastOne", (locals()["TestAtleastOne"],))
TestAtleastOne.__metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestKind", "type_name": "TestKind"}, "struct_kind": "Repeated"}, "options": [], "tags": ["atleast_one"], "type_name": "TestAtleastOne", "type_vars": []}')


TestMap = _Map[TestAtleastOne]
locals()["TestMap"] = types.new_class("TestMap", (locals()["TestMap"],))
TestMap.__metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestAtleastOne", "type_name": "TestAtleastOne"}, "struct_kind": "Map"}, "options": [], "tags": [], "type_name": "TestMap", "type_vars": []}')


class LiteralHello(_Literal[str]):
    literal: str = 'hello'
    
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "hello", "parameters": [], "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "LiteralHello", "type_vars": []}')


class LiteralThreeO(_Literal[float]):
    literal: float = 3.0
    
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": true, "literal_bool": false, "literal_double": 3.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "double", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "LiteralThreeO", "type_vars": []}')


class Literal1(_Literal[int]):
    literal: int = 1
    
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 1, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "Literal1", "type_vars": []}')


class LiteralTrue(_Literal[bool]):
    literal: bool = True
    
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": true, "literal_bool": true, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "LiteralTrue", "type_vars": []}')


class LiteralFive(_Literal[int]):
    literal: int = 5
    
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {}, "is_a": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 5, "literal_string": "", "parameters": [], "primitive_type": "int64", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}, "options": [], "tags": [], "type_name": "LiteralFive", "type_vars": []}')


class TestLiteralStruct(_Struct):
    five: _Optional[LiteralFive]
    four: LiteralTrue
    one: Literal1
    three: LiteralThreeO
    two: LiteralHello
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"five": {"field_name": "five", "tags": ["optional"], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.LiteralFive", "type_name": "LiteralFive"}, "struct_kind": "Scalar"}}, "four": {"field_name": "four", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.LiteralTrue", "type_name": "LiteralTrue"}, "struct_kind": "Scalar"}}, "one": {"field_name": "one", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.Literal1", "type_name": "Literal1"}, "struct_kind": "Scalar"}}, "three": {"field_name": "three", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.LiteralThreeO", "type_name": "LiteralThreeO"}, "struct_kind": "Scalar"}}, "two": {"field_name": "two", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.LiteralHello", "type_name": "LiteralHello"}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestLiteralStruct", "type_vars": []}')


class TestListOfListStruct(_Struct):
    list_of_list: _List[TestAtleastOne]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"list_of_list": {"field_name": "list_of_list", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "parameters": [], "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestAtleastOne", "type_name": "TestAtleastOne"}, "struct_kind": "Repeated"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestListOfListStruct", "type_vars": []}')
