from idol.__idol__ import Struct as _Struct, List as _List, Map as _Map, Optional as _Optional, Enum as _Enum, Any as _Any, Literal as _Literal
import json
import idol.tests.basic
# DO NOT EDIT THIS FILE
# This file is generated via idol_py.py.  You can either subclass these types
# in your own module file or update the relevant model.toml file and regenerate.

__all__ = [
    "TestTagsStruct",
    "TestStructInner",
    "TestStruct",
    "TestOptionalField",
    "TestKind",
    "TestAtleastOne",
    "TestMap",
    "TestLiteralTop",
    "TestLiteralStruct",
    "TestListOfListStruct",
    "TestEnum",
]


class TestTagsStruct(_Struct):
    a: int
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"a": {"field_name": "a", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": ["tag-a", "tag-b"], "type_name": "TestTagsStruct"}')


class TestStructInner(_Struct):
    d: bool
    e: float
    f: int
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"d": {"field_name": "d", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "e": {"field_name": "e", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "double", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "f": {"field_name": "f", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int64", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestStructInner"}')


class TestStruct(_Struct):
    a: str
    b: int
    c: TestStructInner
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"a": {"field_name": "a", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "b": {"field_name": "b", "tags": ["tag"], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "c": {"field_name": "c", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestStructInner", "type_name": "TestStructInner"}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestStruct"}')


class TestOptionalField(_Struct):
    optional: str
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"optional": {"field_name": "optional", "tags": ["optional"], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestOptionalField"}')


TestKind = str


class TestAtleastOne(_Struct):
    atleast_one: _List[TestKind]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"atleast_one": {"field_name": "atleast_one", "tags": ["atleast_one"], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestKind", "type_name": "TestKind"}, "struct_kind": "Repeated"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestAtleastOne"}')


TestMap = _Map[TestAtleastOne]


class TestLiteralTop(_Literal[str]):
    literal: str = "mooo"


class TestLiteralStruct(_Struct):
    five: int
    four: bool
    one: int
    three: float
    two: str
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"five": {"field_name": "five", "tags": ["optional"], "type_struct": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 5, "literal_string": "", "primitive_type": "int64", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "four": {"field_name": "four", "tags": [], "type_struct": {"is_literal": true, "literal_bool": true, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "bool", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "one": {"field_name": "one", "tags": [], "type_struct": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 1, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "three": {"field_name": "three", "tags": [], "type_struct": {"is_literal": true, "literal_bool": false, "literal_double": 3.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "double", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}, "two": {"field_name": "two", "tags": [], "type_struct": {"is_literal": true, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "hello", "primitive_type": "string", "reference": {"module_name": "", "qualified_name": "", "type_name": ""}, "struct_kind": "Scalar"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestLiteralStruct"}')


class TestListOfListStruct(_Struct):
    list_of_list: _List[TestAtleastOne]
    
    # Required to ensure stable ordering.  str() on python dicts is unstable,
    # but the json.dumps is stable.
    __metadata__ = json.loads('{"fields": {"list_of_list": {"field_name": "list_of_list", "tags": [], "type_struct": {"is_literal": false, "literal_bool": false, "literal_double": 0.0, "literal_int53": 0, "literal_int64": 0, "literal_string": "", "primitive_type": "int53", "reference": {"module_name": "tests.basic", "qualified_name": "tests.basic.TestAtleastOne", "type_name": "TestAtleastOne"}, "struct_kind": "Repeated"}}}, "is_a": null, "options": [], "tags": [], "type_name": "TestListOfListStruct"}')


class TestEnum(_Enum):
    a = 'a'
    b = 'b'
    c = 'c'
