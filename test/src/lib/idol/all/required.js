import {
    Enum as Enum_,
    Struct as Struct_,
    List as List_,
    Map as Map_,
    Literal as Literal_,
    Primitive as Primitive_,
} from "./../__idol__"
import * as testsBasic from "./../tests/basic"
import * as testsAbsThree from "./../tests/abs/three"
import * as testsAbsTwo from "./../tests/abs/two"
// DO NOT EDIT THIS FILE
// This file is generated via idol_js.js.  You can either subclass these types
// in your own module file or update the relevant model.toml file and regenerate.

export function TripletOfSideImport2(val) {
    return TripletOfSideImport2.wrap.apply(this, arguments)
}

Struct_(TripletOfSideImport2, [
    ["a", "a", testsAbsThree.SideImport2],
    ["b", "b", List_.of(testsBasic.TestLiteralTop)],
    ["c", "c", Map_.of(testsBasic.TestStruct)],
    ["sideImport", "side_import", testsAbsTwo.SideImport],
]);

TripletOfSideImport2.metadata = {"dependencies":[{"from":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.abs.three","qualified_name":"tests.abs.three.SideImport2","type_name":"SideImport2"}},{"from":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestLiteralTop","type_name":"TestLiteralTop"}},{"from":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestStruct","type_name":"TestStruct"}},{"from":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.abs.two","qualified_name":"tests.abs.two.SideImport","type_name":"SideImport"}}],"fields":{"a":{"field_name":"a","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.abs.three","qualified_name":"tests.abs.three.SideImport2","type_name":"SideImport2"},"struct_kind":"Scalar"}},"b":{"field_name":"b","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestLiteralTop","type_name":"TestLiteralTop"},"struct_kind":"Repeated"}},"c":{"field_name":"c","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestStruct","type_name":"TestStruct"},"struct_kind":"Map"}},"side_import":{"field_name":"side_import","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.abs.two","qualified_name":"tests.abs.two.SideImport","type_name":"SideImport"},"struct_kind":"Scalar"}}},"is_a":null,"named":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"},"options":[],"tags":["v"],"type_vars":[]};

export function ListOfTestKind(val) {
    return ListOfTestKind.wrap.apply(this, arguments);
}

List_(ListOfTestKind, testsBasic.TestKind);
ListOfTestKind.metadata = {"dependencies":[{"from":{"module_name":"all.required","qualified_name":"all.required.ListOfTestKind","type_name":"ListOfTestKind"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestKind","type_name":"TestKind"}}],"fields":{},"is_a":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestKind","type_name":"TestKind"},"struct_kind":"Repeated"},"named":{"module_name":"all.required","qualified_name":"all.required.ListOfTestKind","type_name":"ListOfTestKind"},"options":[],"tags":["atleast_one"],"type_vars":[]};

export function Assembled(val) {
    return Assembled.wrap.apply(this, arguments)
}

Struct_(Assembled, [
    ["testAtleastOne", "test_atleast_one", testsBasic.TestAtleastOne],
    ["testEnum", "test_enum", testsBasic.TestEnum],
    ["testKind", "test_kind", testsBasic.TestKind],
    ["testListOf", "test_list_of", ListOfTestKind],
    ["testListOfListStruct", "test_list_of_list_struct", testsBasic.TestListOfListStruct],
    ["testLiteralStruct", "test_literal_struct", testsBasic.TestLiteralStruct],
    ["testLiteralTop", "test_literal_top", testsBasic.TestLiteralTop],
    ["testMap", "test_map", testsBasic.TestMap],
    ["testOptionalField", "test_optional_field", testsBasic.TestOptionalField],
    ["testStruct", "test_struct", testsBasic.TestStruct],
    ["testTriplet", "test_triplet", TripletOfSideImport2],
]);

Assembled.metadata = {"dependencies":[{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestAtleastOne","type_name":"TestAtleastOne"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestEnum","type_name":"TestEnum"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestKind","type_name":"TestKind"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":true,"to":{"module_name":"all.required","qualified_name":"all.required.ListOfTestKind","type_name":"ListOfTestKind"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestListOfListStruct","type_name":"TestListOfListStruct"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestLiteralStruct","type_name":"TestLiteralStruct"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestLiteralTop","type_name":"TestLiteralTop"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestMap","type_name":"TestMap"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestOptionalField","type_name":"TestOptionalField"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":false,"to":{"module_name":"tests.basic","qualified_name":"tests.basic.TestStruct","type_name":"TestStruct"}},{"from":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"is_abstraction":false,"is_local":true,"to":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"}}],"fields":{"test_atleast_one":{"field_name":"test_atleast_one","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestAtleastOne","type_name":"TestAtleastOne"},"struct_kind":"Scalar"}},"test_enum":{"field_name":"test_enum","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestEnum","type_name":"TestEnum"},"struct_kind":"Scalar"}},"test_kind":{"field_name":"test_kind","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestKind","type_name":"TestKind"},"struct_kind":"Scalar"}},"test_list_of":{"field_name":"test_list_of","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"all.required","qualified_name":"all.required.ListOfTestKind","type_name":"ListOfTestKind"},"struct_kind":"Scalar"}},"test_list_of_list_struct":{"field_name":"test_list_of_list_struct","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestListOfListStruct","type_name":"TestListOfListStruct"},"struct_kind":"Scalar"}},"test_literal_struct":{"field_name":"test_literal_struct","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestLiteralStruct","type_name":"TestLiteralStruct"},"struct_kind":"Scalar"}},"test_literal_top":{"field_name":"test_literal_top","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestLiteralTop","type_name":"TestLiteralTop"},"struct_kind":"Scalar"}},"test_map":{"field_name":"test_map","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestMap","type_name":"TestMap"},"struct_kind":"Scalar"}},"test_optional_field":{"field_name":"test_optional_field","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestOptionalField","type_name":"TestOptionalField"},"struct_kind":"Scalar"}},"test_struct":{"field_name":"test_struct","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"tests.basic","qualified_name":"tests.basic.TestStruct","type_name":"TestStruct"},"struct_kind":"Scalar"}},"test_triplet":{"field_name":"test_triplet","tags":[],"type_struct":{"literal":null,"parameters":[],"primitive_type":"int53","reference":{"module_name":"all.required","qualified_name":"all.required.TripletOfSideImport2","type_name":"TripletOfSideImport2"},"struct_kind":"Scalar"}}},"is_a":null,"named":{"module_name":"all.required","qualified_name":"all.required.Assembled","type_name":"Assembled"},"options":[],"tags":[],"type_vars":[]};
