from idol.__idol__ import Struct as _Struct, List as _List, Map as _Map, Optional as _Optional, Enum as _Enum, Any as _Any, Literal as _Literal, expand_primitive as _expand_primitive, validate_primitive as _validate_primitive
import json
import types

import idol.all.optional
import idol.all.required
# DO NOT EDIT THIS FILE
# This file is generated via idol_py.py.  You can either subclass these types
# in your own module file or update the relevant model.toml file and regenerate.

__all__ = [
    "AssembledOptional",
    "AssembledRequired",
]


AssembledOptional = idol.all.optional.Assembled
locals()["AssembledOptional"] = types.new_class("AssembledOptional", (locals()["AssembledOptional"],))
AssembledOptional.__metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "all.target", "qualified_name": "all.target.AssembledOptional", "type_name": "AssembledOptional"}, "is_abstraction": false, "is_local": false, "to": {"module_name": "all.optional", "qualified_name": "all.optional.Assembled", "type_name": "Assembled"}}], "fields": {}, "is_a": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "all.optional", "qualified_name": "all.optional.Assembled", "type_name": "Assembled"}, "struct_kind": "Scalar"}, "named": {"module_name": "all.target", "qualified_name": "all.target.AssembledOptional", "type_name": "AssembledOptional"}, "options": [], "tags": [], "type_vars": []}')


AssembledRequired = idol.all.required.Assembled
locals()["AssembledRequired"] = types.new_class("AssembledRequired", (locals()["AssembledRequired"],))
AssembledRequired.__metadata__ = json.loads('{"dependencies": [{"from": {"module_name": "all.target", "qualified_name": "all.target.AssembledRequired", "type_name": "AssembledRequired"}, "is_abstraction": false, "is_local": false, "to": {"module_name": "all.required", "qualified_name": "all.required.Assembled", "type_name": "Assembled"}}], "fields": {}, "is_a": {"literal": null, "parameters": [], "primitive_type": "int", "reference": {"module_name": "all.required", "qualified_name": "all.required.Assembled", "type_name": "Assembled"}, "struct_kind": "Scalar"}, "named": {"module_name": "all.target", "qualified_name": "all.target.AssembledRequired", "type_name": "AssembledRequired"}, "options": [], "tags": [], "type_vars": []}')
