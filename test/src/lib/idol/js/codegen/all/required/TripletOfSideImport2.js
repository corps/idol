/*
DO NOT EDIT
This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
*/
import { TestsAbsThreeSideImport2 as CodegenTestsAbsThreeSideImport2 } from "../../tests/abs/three/SideImport2";
import { List, Map, Struct } from "../../__idol__";
import { TestsBasicTestLiteralTop as CodegenTestsBasicTestLiteralTop } from "../../tests/basic/TestLiteralTop";
import { TestsBasicTestStruct as CodegenTestsBasicTestStruct } from "../../tests/basic/TestStruct";
import { TestsAbsTwoSideImport as CodegenTestsAbsTwoSideImport } from "../../tests/abs/two/SideImport";

export class AllRequiredTripletOfSideImport2 {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }
  get a() {
    return CodegenTestsAbsThreeSideImport2.wrap(this._original["a"]);
  }
  set a(val) {
    this._original["a"] = CodegenTestsAbsThreeSideImport2.unwrap(val);
  }
  get b() {
    return List.of(CodegenTestsBasicTestLiteralTop, { atleastOne: false }).wrap(
      this._original["b"]
    );
  }
  set b(val) {
    this._original["b"] = List.of(CodegenTestsBasicTestLiteralTop, {
      atleastOne: false
    }).unwrap(val);
  }
  get c() {
    return Map.of(CodegenTestsBasicTestStruct, {}).wrap(this._original["c"]);
  }
  set c(val) {
    this._original["c"] = Map.of(CodegenTestsBasicTestStruct, {}).unwrap(val);
  }
  get side_import() {
    return CodegenTestsAbsTwoSideImport.wrap(this._original["side_import"]);
  }
  set side_import(val) {
    this._original["side_import"] = CodegenTestsAbsTwoSideImport.unwrap(val);
  }
  get sideImport() {
    return this.side_import;
  }
  set sideImport(val) {
    this.side_import = val;
  }
}

Struct(AllRequiredTripletOfSideImport2, [
  { fieldName: "a", type: CodegenTestsAbsThreeSideImport2, optional: false },
  {
    fieldName: "b",
    type: List.of(CodegenTestsBasicTestLiteralTop, { atleastOne: false }),
    optional: false
  },
  {
    fieldName: "c",
    type: Map.of(CodegenTestsBasicTestStruct, {}),
    optional: false
  },
  {
    fieldName: "side_import",
    type: CodegenTestsAbsTwoSideImport,
    optional: false
  }
]);
