// DO NOT EDIT
// This file was generated by idol_js, any changes will be overwritten when idol_js is run again.
import { TestsBasicTestAtleastOne as CodegenTestsBasicTestAtleastOne } from "../../tests/basic/TestAtleastOne";
import { TestsBasicTestEnum as CodegenTestsBasicTestEnum } from "../../tests/basic/TestEnum";
import { TestsBasicTestKind as CodegenTestsBasicTestKind } from "../../tests/basic/TestKind";
import { AllRequiredListOfTestKind as CodegenAllRequiredListOfTestKind } from "./ListOfTestKind";
import { TestsBasicTestListOfListStruct as CodegenTestsBasicTestListOfListStruct } from "../../tests/basic/TestListOfListStruct";
import { TestsBasicTestLiteralStruct as CodegenTestsBasicTestLiteralStruct } from "../../tests/basic/TestLiteralStruct";
import { TestsBasicTestLiteralTop as CodegenTestsBasicTestLiteralTop } from "../../tests/basic/TestLiteralTop";
import { TestsBasicTestMap as CodegenTestsBasicTestMap } from "../../tests/basic/TestMap";
import { TestsBasicTestOptionalField as CodegenTestsBasicTestOptionalField } from "../../tests/basic/TestOptionalField";
import { TestsBasicTestStruct as CodegenTestsBasicTestStruct } from "../../tests/basic/TestStruct";
import { AllRequiredTripletOfSideImport2 as CodegenAllRequiredTripletOfSideImport2 } from "./TripletOfSideImport2";
import { Struct } from "../../__idol__";

export class AllRequiredAssembled {
  constructor(val) {
    this._original = val;
  }
  // These methods are implemented via the runtime, stubs exist here for reference.
  static validate(val) {}
  static isValid(val) {
    return true;
  }
  static expand(val) {
    return val;
  }
  static unwrap(val) {
    return val;
  }
  static wrap(val) {
    return null;
  }

  get test_atleast_one() {
    return CodegenTestsBasicTestAtleastOne.wrap(
      this._original["test_atleast_one"]
    );
  }
  set test_atleast_one(val) {
    this._original["test_atleast_one"] = CodegenTestsBasicTestAtleastOne.unwrap(
      val
    );
  }
  get testAtleastOne() {
    return this.test_atleast_one;
  }
  set testAtleastOne(val) {
    this.test_atleast_one = val;
  }

  get test_enum() {
    return CodegenTestsBasicTestEnum.wrap(this._original["test_enum"]);
  }
  set test_enum(val) {
    this._original["test_enum"] = CodegenTestsBasicTestEnum.unwrap(val);
  }
  get testEnum() {
    return this.test_enum;
  }
  set testEnum(val) {
    this.test_enum = val;
  }

  get test_kind() {
    return CodegenTestsBasicTestKind.wrap(this._original["test_kind"]);
  }
  set test_kind(val) {
    this._original["test_kind"] = CodegenTestsBasicTestKind.unwrap(val);
  }
  get testKind() {
    return this.test_kind;
  }
  set testKind(val) {
    this.test_kind = val;
  }

  get test_list_of() {
    return CodegenAllRequiredListOfTestKind.wrap(
      this._original["test_list_of"]
    );
  }
  set test_list_of(val) {
    this._original["test_list_of"] = CodegenAllRequiredListOfTestKind.unwrap(
      val
    );
  }
  get testListOf() {
    return this.test_list_of;
  }
  set testListOf(val) {
    this.test_list_of = val;
  }

  get test_list_of_list_struct() {
    return CodegenTestsBasicTestListOfListStruct.wrap(
      this._original["test_list_of_list_struct"]
    );
  }
  set test_list_of_list_struct(val) {
    this._original[
      "test_list_of_list_struct"
    ] = CodegenTestsBasicTestListOfListStruct.unwrap(val);
  }
  get testListOfListStruct() {
    return this.test_list_of_list_struct;
  }
  set testListOfListStruct(val) {
    this.test_list_of_list_struct = val;
  }

  get test_literal_struct() {
    return CodegenTestsBasicTestLiteralStruct.wrap(
      this._original["test_literal_struct"]
    );
  }
  set test_literal_struct(val) {
    this._original[
      "test_literal_struct"
    ] = CodegenTestsBasicTestLiteralStruct.unwrap(val);
  }
  get testLiteralStruct() {
    return this.test_literal_struct;
  }
  set testLiteralStruct(val) {
    this.test_literal_struct = val;
  }

  get test_literal_top() {
    return CodegenTestsBasicTestLiteralTop.wrap(
      this._original["test_literal_top"]
    );
  }
  set test_literal_top(val) {
    this._original["test_literal_top"] = CodegenTestsBasicTestLiteralTop.unwrap(
      val
    );
  }
  get testLiteralTop() {
    return this.test_literal_top;
  }
  set testLiteralTop(val) {
    this.test_literal_top = val;
  }

  get test_map() {
    return CodegenTestsBasicTestMap.wrap(this._original["test_map"]);
  }
  set test_map(val) {
    this._original["test_map"] = CodegenTestsBasicTestMap.unwrap(val);
  }
  get testMap() {
    return this.test_map;
  }
  set testMap(val) {
    this.test_map = val;
  }

  get test_optional_field() {
    return CodegenTestsBasicTestOptionalField.wrap(
      this._original["test_optional_field"]
    );
  }
  set test_optional_field(val) {
    this._original[
      "test_optional_field"
    ] = CodegenTestsBasicTestOptionalField.unwrap(val);
  }
  get testOptionalField() {
    return this.test_optional_field;
  }
  set testOptionalField(val) {
    this.test_optional_field = val;
  }

  get test_struct() {
    return CodegenTestsBasicTestStruct.wrap(this._original["test_struct"]);
  }
  set test_struct(val) {
    this._original["test_struct"] = CodegenTestsBasicTestStruct.unwrap(val);
  }
  get testStruct() {
    return this.test_struct;
  }
  set testStruct(val) {
    this.test_struct = val;
  }

  get test_triplet() {
    return CodegenAllRequiredTripletOfSideImport2.wrap(
      this._original["test_triplet"]
    );
  }
  set test_triplet(val) {
    this._original[
      "test_triplet"
    ] = CodegenAllRequiredTripletOfSideImport2.unwrap(val);
  }
  get testTriplet() {
    return this.test_triplet;
  }
  set testTriplet(val) {
    this.test_triplet = val;
  }
}

Struct(AllRequiredAssembled, [
  {
    fieldName: "test_atleast_one",
    type: CodegenTestsBasicTestAtleastOne,
    optional: false
  },
  { fieldName: "test_enum", type: CodegenTestsBasicTestEnum, optional: false },
  { fieldName: "test_kind", type: CodegenTestsBasicTestKind, optional: false },
  {
    fieldName: "test_list_of",
    type: CodegenAllRequiredListOfTestKind,
    optional: false
  },
  {
    fieldName: "test_list_of_list_struct",
    type: CodegenTestsBasicTestListOfListStruct,
    optional: false
  },
  {
    fieldName: "test_literal_struct",
    type: CodegenTestsBasicTestLiteralStruct,
    optional: false
  },
  {
    fieldName: "test_literal_top",
    type: CodegenTestsBasicTestLiteralTop,
    optional: false
  },
  { fieldName: "test_map", type: CodegenTestsBasicTestMap, optional: false },
  {
    fieldName: "test_optional_field",
    type: CodegenTestsBasicTestOptionalField,
    optional: false
  },
  {
    fieldName: "test_struct",
    type: CodegenTestsBasicTestStruct,
    optional: false
  },
  {
    fieldName: "test_triplet",
    type: CodegenAllRequiredTripletOfSideImport2,
    optional: false
  }
]);
